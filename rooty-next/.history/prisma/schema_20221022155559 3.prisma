generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  name       String
  lastname   String
  password   String
  email      String        @unique
  aboutMe    String        @db.Text
  role       Role          @default(USER)
  posts      Post[]
  photo      Photo?
  program    Program?
  Skills     SkillOnUser[]
  ChatRooms1 ChatRoom[]    @relation("UserNumberOne")
  ChatRooms2 ChatRoom[]    @relation("UserNumberTwo")
  Message    Message[]
}

// add stuff like photos to this
// finish up adding all the details to this
model Post {
  postId      Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  description String   @default("")
  author      User     @relation(fields: [authorId], references: [userId])
  authorId    Int
  category    Category @relation(fields: [categoryId], references: [categoryId])
  price       Int      @default(0)
  rating      Int      @default(0)
  categoryId  Int
  Photos      Photo[]
}

// Relationship with the User works now
model Program {
  programId   Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  programName String   @db.VarChar(50)
  author      User     @relation(fields: [authorId], references: [userId])
  authorId    Int      @unique
}

// MTM relationship works with the users now (using a join tabel called SkillOnUser)
model Skill {
  skillId   Int           @id @default(autoincrement())
  skillName String        @unique @db.VarChar(30)
  users     SkillOnUser[]
}

model SkillOnUser {
  skillOnUserId Int   @id @default(autoincrement())
  skill         Skill @relation(fields: [sKillId], references: [skillId])
  sKillId       Int
  user          User  @relation(fields: [userid], references: [userId])
  userid        Int
}

// A user can have a photo and a photo might belong to a user
// A Post can have a lot of photos, but a photo must have a post
model Photo {
  photoId      Int    @id @default(autoincrement())
  userPhotoUrl String @db.Text
  author       User?  @relation(fields: [userId], references: [userId])
  userId       Int?   @unique
  post         Post   @relation(fields: [postId], references: [postId])
  postId       Int    @unique
}

// MTM for posts and photos that was wrong but it was good code so I just kept it
// model PostOnPhoto {
//   UserOnPhotoId Int   @id @default(autoincrement())
//   photo         Photo @relation(fields: [photoId], references: [photoId])
//   photoId       Int
//   post          Post  @relation(fields: [postId], references: [postId])
//   postId        Int
// }

model Category {
  categoryId   Int    @id @default(autoincrement())
  categoryName String
  image        String @default()
  posts        Post[]
}

model ChatRoom {
  chatRoomId Int       @id @default(autoincrement())
  userOne    User      @relation("UserNumberOne", fields: [userOneId], references: [userId])
  userOneId  Int
  userTwo    User      @relation("UserNumberTwo", fields: [userTwoId], references: [userId])
  userTwoId  Int
  createdAt  DateTime  @default(now())
  Message    Message[]
}

model Message {
  messageId  Int      @id @default(autoincrement())
  content    String   @db.VarChar(500)
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [userId], references: [userId])
  userId     Int      @unique
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  chatRoomId Int      @unique
}

enum Role {
  USER
  ADMIN
}
